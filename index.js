const TelegramBot = require('node-telegram-bot-api');
const getNextSegment = require('./getNextSegment');
const getPrevSegment = require('./getPrevSegment');
const getTrainInfoBySegment = require('./getTrainInfoBySegment');
const getInlineKeyboardForTrain = require('./getInlineKeyboardForTrain');
const getInlineWithTrains = require('./getInlineWithTrains');
const moment = require('moment');

const token = '552915665:AAGV5520Y6yIaw4szf74kOEPc3j-mKbTaYs';
//const bot = new TelegramBot(token, {polling: true}); //local
const options = {
    webHook: {
        port: process.env.PORT
    }
};

const url = process.env.APP_URL || 'https://yatrainstimetable.herokuapp.com:443';
// const bot = new TelegramBot(token, {polling: true});
const bot = new TelegramBot(token, options); //heroku

bot.setWebHook(`${url}/bot${token}`); //heroku

bot.on("message", (msg) => {
    const chatId = msg.chat.id;

    if (/\/start/.test(msg.text)) {
        bot.sendMessage(chatId, `–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! \n–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤—å –±–æ—Ç—É –∫–æ–º–∞–Ω–¥—É /keyboard –∏ –≤ –ø–æ—è–≤–∏–≤—à–µ–º—Å—è —Å–ø–∏—Å–∫–µ –≤—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –º–∞—Ä—à—Ä—É—Çüòâ`);
    }
    if (/\/time/.test(msg.text)) {
        bot.sendMessage(chatId, moment().format())
    }
    if (/\/date/.test(msg.text)) {
        var today = new Date();
            bot.sendMessage(
                chatId, `–î–∞—Ç–∞: ${today}`);
            return;
    }
    if(msg.text  !== '/keyboard' && msg.text  !== '/start' && msg.text !== '/help' && msg.text !== '/date' && msg.text !== '/time') {
        bot.sendMessage(chatId, `–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º:\n/keyboard - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π\n/help - —Å–ø—Ä–∞–≤–∫–∞\n<b>–õ—é–±—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑–ª–∏—à–Ω–∏.</b>`,
            {parse_mode: 'html'}
        );
    }
    if (/\/help/.test(msg.text)) {
        bot.sendMessage(chatId, `–ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–∞–Ω–¥—ã /keyboard –ø–æ—è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ –º–∞—Ä—à—Ä—É—Ç–æ–≤. –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –Ω—É–∂–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ —Å–ª–µ–¥—É–µ—Ç –Ω–∞–∂–∞—Ç—å –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –∏ –¥–æ–∂–¥–∞—Ç—å—Å—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –í –ø–æ—è–≤–∏–≤—à–µ–º—Å—è –æ–∫–Ω–µ –ø–æ–º–∏–º–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —ç–ª–µ–∫—Ç—Ä–∏—á–∫–µ –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—à–µ–¥—à–∏—Ö –ø–æ–µ–∑–¥–∞—Ö –∏–ª–∏ –æ –µ—â—ë –Ω–µ –ø—Ä–∏–±—ã–≤—à–∏—Ö. –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –≤—Å–µ—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ –Ω—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º.`);
    }
    if (/\/keyboard/.test(msg.text)) {
        const params = {
            reply_markup: {
                inline_keyboard: getInlineWithTrains()
            }
        };
        bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç:', params);
    }
});

bot.on('callback_query', callbackQuery => {
    bot.answerCallbackQuery(callbackQuery.id, {text: '...'})
    const data = JSON.parse(callbackQuery.data);
    const chatId = callbackQuery.from.id;

    switch (data.do) {
        case 'showTrain':
            getNextSegment(data.f, data.t, +new Date())
                .then(segment => {
                    const inline_keyboard = getInlineKeyboardForTrain({
                        from: data.f,
                        to: data.t
                    }, +new Date(segment.departure));
                    const text = getTrainInfoBySegment(segment);
                    const options = {
                        chat_id: chatId,
                        message_id: callbackQuery.message.message_id,
                        reply_markup: {inline_keyboard: inline_keyboard},
                        parse_mode: 'html'
                    };
                    bot.editMessageText(text, options);
                });
            break;
        case 'prev':
            getPrevSegment(data.f, data.t, data.d)
                .then(segment => {
                    const inline_keyboard = getInlineKeyboardForTrain({
                        from: data.f,
                        to: data.t
                    }, +new Date(segment.departure));//–¥–∞—Ç–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ç–æ—Ä–æ–π —Å–æ–∑–¥–∞—é—Ç—Å—è –∫–Ω–æ–ø–∫–∏
                    const text = getTrainInfoBySegment(segment);
                    const options ={
                        chat_id: chatId,
                        message_id: callbackQuery.message.message_id,
                        reply_markup: {inline_keyboard: inline_keyboard},
                        parse_mode: 'html'
                    };
                    bot.editMessageText(text, options);
                });
            break;
        case 'next':
            getNextSegment(data.f, data.t, data.d)
                .then(segment => {
                    const inline_keyboard = getInlineKeyboardForTrain({
                        from: data.f,
                        to: data.t
                    }, +new Date(segment.departure));
                    const text = getTrainInfoBySegment(segment);
                    const options = {
                        chat_id: chatId,
                        message_id: callbackQuery.message.message_id,
                        reply_markup: {inline_keyboard: inline_keyboard},
                        parse_mode: 'html'
                    };
                    bot.editMessageText(text, options);
                });
            break;
        case 'back':
            const inline_keyboard = getInlineWithTrains();
            const text = '–í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ';
            const options = {
                chat_id: chatId,
                message_id: callbackQuery.message.message_id,
                reply_markup: {inline_keyboard: inline_keyboard}
            };
            bot.editMessageText(text, options);
        // getSegments(data.f, data.t).then(segments => {
        //     const segment = getNextTrain(segments, data.d);
        //     const inline_keyboard = getInlineKeyboardForTrain({ from: data.f, to: data.t }, +new Date(segment.departure));
        //     const text = getTrainInfoBySegment(segment);
        //     const options = {
        //         chat_id: chatId,
        //         message_id: callbackQuery.message.message_id,
        //         reply_markup: { inline_keyboard: inline_keyboard }
        //     }
        //     bot.editMessageText(text, options);
        // });
        break;
    }
});